import { ResponseType } from "@microsoft/microsoft-graph-client";
import type { NextPage, NextPageContext } from "next";
import { useRouter } from "next/router";
import { useState } from "react";
import TableContainer from "../components/Table/Container";
import useResource from "../hooks/useResource";
import { client } from "../lib/client";
import { Resource } from "../lib/consts";
import cookieMiddleware from "../lib/cookies";
const userId = "0ec189a6-d8ce-4bbb-ae3c-fdffde71d6a7";

const getPageContent = async ({ endpoint, context }: any) => {
  try {
    const pageContent = await client
      .api(endpoint)
      .responseType(ResponseType.TEXT)
      .get();

    cookieMiddleware()
      .supplyContext(context)
      .setCookie("pagecontent", { cookieName: "pagecontent", link: endpoint });

    return pageContent;
  } catch (e) {
    console.log(e);
    console.error("An unknown error has occurred.");
    return false;
  }
};

interface DemoProps {
  resourceData?: any[];
  resourceType?: string | null;
  content?: string;
  cookie?: any;
}

const Demo: NextPage = (props: DemoProps) => {
  const resource = useResource({
    resource: props.content || props.resourceData,
    newHeaders: ["Display Name"],
    cookie: props.cookie || undefined,
  });
  const router = useRouter();
  const [selectedRow, setSelectedRow] = useState<any>("");

  if (props.resourceData === undefined || props.resourceData.length === 0)
    return null;

  if (resource.headers === undefined || resource.rows === undefined)
    return null;

  const handleRowClick = (children: any) => {
    if (props.cookie !== undefined && props.cookie.cookieName === "pagecontent")
      return;
    const resourceData = resource.resource.find(
      (data: any) =>
        data.displayName === children[0] || data.title === children[0]
    );

    setSelectedRow(resourceData);
    router.push(
      {
        pathname: `http://localhost:3000/demo`,
        query: {
          id: resourceData.id,
          resource: props.resourceType,
        },
      },
      undefined,
      { shallow: false }
    );
  };

  return (
    <>
      <TableContainer
        headers={resource.headers}
        rows={resource.rows}
        onClick={handleRowClick}
      />
      <div className="container mx-auto w-1/2 text-xl text-gray-200 text-center">
        <label htmlFor="cellData" className="pr-2">
          Cell Data
        </label>
        <input type="text" name="cellData" className="rounded-xl" />
      </div>
    </>
  );
};

export async function getServerSideProps(context: NextPageContext) {
  if (context.query.id) {
    const resourceEnums = Object.values(Resource);

    if (typeof context.query.resource === "string") {
      const indexOfResource = resourceEnums.indexOf(
        context.query.resource as Resource
      );

      // If there is a resource in Resource enum
      if (indexOfResource !== -1) {
        const queryResource: string = context.query.resource;

        const parsed = queryResource.substring(queryResource.length - 1, 0);

        if (parsed as keyof Resource) {
          try {
            const getResourceData = await client
              .api(
                `users/${userId}/onenote/${queryResource.toLowerCase()}/${
                  context.query.id
                }`
              )
              .get();

            if (getResourceData.self) {
              cookieMiddleware()
                .supplyContext(context)
                .setIfEmpty()
                .setCookie(parsed.toLowerCase(), {
                  link: getResourceData.self,
                });
            }
          } catch (e) {
            console.error("An error has occurred with self.");
            console.error(e);
          }
        }
      }
    }
  }

  const cookies = cookieMiddleware()
    .supplyContext(context)
    .setIfEmpty()
    .getCookies(["notebook", "section", "page", "pagecontent"]);

  const foundResource: any = {};

  const unselectedResource = cookies.find((resource: any, index: number) => {
    if (resource.link === undefined) {
      Object.assign(foundResource, cookies[index - 1]);
      return true;
    }
  });

  const props: DemoProps = {};

  const pageContentCookie = cookieMiddleware()
    .supplyContext(context)
    .getCookie("pagecontent");

  if (pageContentCookie && pageContentCookie.link) {
    const content = await getPageContent({
      endpoint: pageContentCookie.link,
      context,
    });

    return {
      props: {
        cookie: pageContentCookie,
        content: content,
        resourceData: [true],
      },
    };
  }

  if (!unselectedResource?.cookieName) return { props };
  const unselectedCookie =
    unselectedResource.cookieName?.toUpperCase() || undefined;

  const parsedResource: Resource =
    Resource[unselectedCookie as keyof typeof Resource];
  const resourceAsGraphUrl: string = parsedResource.toLowerCase();

  const endpoint = foundResource.link
    ? `${foundResource.link}/${resourceAsGraphUrl}`
    : `users/${userId}/onenote/${resourceAsGraphUrl}`;

  const displayName: string =
    parsedResource === Resource.PAGE ? "title" : "displayName";

  if (
    parsedResource !== ("CONTENT" || "PAGE") ||
    unselectedCookie !== "PAGECONTENT"
  ) {
    const getResource = await client
      .api(endpoint)
      .select([displayName, "id", "self"])
      .get();

    if (
      getResource.error ||
      getResource.value === undefined ||
      getResource.value.length === 0
    )
      return props;

    props["resourceType"] = parsedResource;
    props["resourceData"] = getResource.value;
  } else {
    const pageContent = await getPageContent({ endpoint, context });
    props["resourceType"] = null;
    props["resourceData"] = pageContent;
  }

  return { props };
}

export default Demo;
